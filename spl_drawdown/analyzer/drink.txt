from time import sleep
from typing import List

from heliuspy import HeliusAPI
from solana.rpc.api import Client
from solders.keypair import Keypair

from spl_drawdown.analyzer.types.hd import HoldingData
from spl_drawdown.analyzer.utils.log_analyzer import get_logger
from spl_drawdown.utils.settings import settings_key_values

logger = get_logger()


class Drinkdrawdown:
    def __init__(self):
        try:
            self.BIRDEYE_API_TOKEN = settings_key_values["BIRDEYE_API_TOKEN"]
            self.SOLANA_PRIVATE_KEY = settings_key_values["SOLANA_PRIVATE_KEY"]
            self.HELIUS_API_KEY = settings_key_values["HELIUS_API_KEY"]
            self.RPC_ENDPOINT = f"https://mainnet.helius-rpc.com/?api-key={self.HELIUS_API_KEY}"
            self.COMMITMENT = "confirmed"  # Commitment level for RPC calls
            self.Helius = HeliusAPI(api_key=self.HELIUS_API_KEY)
        except KeyError:
            raise ValueError("Environment variable is required but not set")

        # Initialize Solana client
        try:
            self.client = Client(self.RPC_ENDPOINT, commitment=self.COMMITMENT)
        except Exception as e:
            raise Exception(f"Failed to connect to Helius RPC: {e}")

        self.drink_mint = "AZwo2yaRbnxspUwSg4K11bHt89QsqyW4gKfV2wNQdaos"

    def run(self):
        """ """
        addresses = [
            "4LTTo2qBaqMB1kwGusLWTFgTHudqQmDZoLsuUK3EVqGP",
            "6MxrVzEgvKAk5KaMhojFpeSiUc1iAumtVivdT7F8qLgt",
            "AbAHuSAT6XsgHLrA1LZuh8Wb1mrCSD355AxVWyPHk2B6",
            "HzrMJkkN5jvD98focyivbjasDmPwPY3AkuB9aG1uAzbH",
            "8Sid38QZK7K1BHmPbPdcTbiSt2f6XYhFSKF6EPUguaky",
            "JBB6gnTDRALssCmdNqmPBkUdUq3b7iYioWWEmb8yEX1C",
            "85Q1mU3Xegko8BpaXVb89Gj4YFnZ3fNVNVAEF6pVrvGe",
            "2ahYNEt4wUazqteyuARJGSqvk5m1esNFiffa6rBtgVtE",
            "9d2k6AhPZd79ydSk7qWPH3BxKoMTbJhc4HtjWZTfa26k",
            "2zch5naYfSZBYU2Tau2LRiu4AWxdqzpTNMpG25HC8swr",
            "9QMNtfopdauBTmXVTutARqmDNumnhCkKy7bB3X75fBS",
            "6UtmmZg233HqmSL7ZLadoriPxFHFvXXXfMPy7iv4SLBe",
            "4ZjYSCH3Sib9iMSM3QN2sL2kwxNcXG2P4XCemSC2hsyb",
            "6tV72eE5odoLwNtffx5oSnPfU1tyadakDBjspn6xy7AS",
            "6DFW5BSR4vVJ2g6CXmg5c5LbXcU4Gcwa3ihAUWbsEhMz",
            "2qpKc4Yq1wsM2nVxe8Vs7YqvCkms2qxyk7h55UHjorzT",
            "CD2FpwpYiEGHiR6aEkXF8n1dmZJmJf3hVtf8EyezbagL",
            "AMYFmxJjA9jLgpizBDwnvEsxj9nX6BSUSisvnuyfebaU",
            "jnwngX6Pwsrt8fnzFZmpkZpAsLfJcqf4vtupRpQhQKN",
            "6j47KfPbEMoqwjJCY6neNUEhgFRRTumsCPddNQRXgNcv",
            "rLxcJZN76pGtvXB1HytSVekNRiu9yQWmjb5PLffQtND",
            "4hYL2NrG2mw5k89S1ebPkB5FjQ49efM6qWcekaYfDoLn",
            "3BCPgA6hXtfByMWXCZRnJMbVnXtfV6ujxP4Vhn6v6RSW",
            "4W8wD8L2px9NTcqStvXoSwgaVMyxaNcxp2o7zFQieGnA",
            "ASFCGfuYZPrxFCcYRfwkQACv73dsfG9JLnA3eUuDg1bL",
            "6AjtUJUrkSL7iZQdpvCmGS3fR6jyAvkYFUsAJdmr9ETN",
            "BQCgHxZf7Y7H36KhKQ8hpSddWuMQmTaQAM6VoDLjNigR",
            "y6an4xPKCg7mS8n1ahDt6RCJyiK9H1Wxo5R7qhod1ZC",
            "LoTy38EiLYg85rWq5okYjNwzQECGbYa6uPcJPj8MHu2",
            "AxqYe4EieqM6PCVrWjJBN5h3YP4FxZ26ycQKkhvFFrdS",
            "4Lx36jJqGnt5Ps8G6fWGJrcQCEEApVu6na2ipZFpvkiD",
            "BHzJmw2LstmJVTjAsijzRYboE86Xy1Hs21NErtbu1tb1",
            "ianCQ8YLAhPhqqJAsLaxcnEwni9aCKNBruH4dMmMHq3",
            "Hm3ntDCtgn2p4kPiv1BvcDaAdXamNsqscM2gKGziDBUm",
            "8iHw1KLDdxGS8ZH8cJGvCKBA7uugBo1MFgB7Jvrib1aX",
            "BbRPjhv2fDbdwfXaXdULWZEc9thhqEoyVkXTfH8W2nin",
            "5s3dtdEqJE8dtQ8JwbcD3nyPtm7irDPDF8sE2MsyDbRg",
            "D2MVXQs7gr8je4Lrk1p1LsrF1bHU381F1m3PkHoVcg7F",
            "AopQu691HFi4Tj6USrpiwkDxQScw8iKN4mFtJcDWn3d5",
            "DcCWHU8Had9AuFC3wNjkPjVoJ15pv7NaWKKk9WqKqavv",
            "J4iPzuAsW8H7uwFZQvonhXx38RC7iKbADojaypBAcp7L",
            "2hh9e6MpecoaQcoPDXjCvzdKBRMW87uMxoqVPH6GcSz5",
            "A6hnh9romT5dkNhDF4GHgF7qM3dV6kddxCNVaoGrutpR",
            "DjBB92pDbRi4TZcExwPvm4EpoZb3uW4Aq4QDnSr9MNmA",
            "E6BmLp4bNCzBMurGd5vWbwfBTL925YfRP1SD5FHraqoH",
            "AwkN84L4iL71SSLMHD6qSm35XEwYrfLbeyudYTJBTtQM",
            "FMz9XpMKkw1nvuKWMFAzHkSakBDJY5aVfddjaAmMvtpP",
            "FK4Eant6NQXufZUsJHqPGYLy7H5kGVYjH2AAEK6Rgtqz",
            "4Urr54Yd3NuydBtxLpBbxRAceqC5L9EJxQLc8cS1Jqe4",
            "BSwn7JaRWawtCmR4fPySFeYUSKU6TCoaofVpeowwdL8M",
            "BT2WMom4rvxRbGFjrLvXx9nzzmjkmsqfscKfpDbw7E6u",
            "26fyGauZ6SyRHUjn59xYyYcBKRNF8sCzjdcUdRD1Lgnx",
            "58Fqsnv4L69HLKZEJJewLdoL3HHHuMSt9CQ2zLkDmwKF",
            "Da7ZDWfJDhZpXFXLJJLiM3iuC6BFyPBeN5RGuj2qLt1b",
            "CMJCg61g8G1R3vCBa4w7J7E1qb4v5ywzqAZeRWeKN9eA",
            "CNBXhge3bghuHtuXXnutM9b2mt4KCgRusPYFW87UAFr9",
            "FZRvMaU4Um9qRco1ZLYDbNWmEGWm7Faf6zm8UQXTWxsH",
            "EWbVmTjFPqTvtY3RWmMsKCrQBytXFm66jbeJkf5gDWF1",
            "E3R3FsbArFBsjQjuyLxJXnESrN9SSqy8c2LLB6dRxPXr",
            "DUMRS3wrUip2XxBKSzGpkSj9BkMvGs4mQh1diN7cEkuF",
            "FWrQr4GdhZNg8LHkm6w23VaiVeYbo4r6JdDkBCuNM5sU",
            "2pZsbRPLrKMNRaxXrKfgUnRhkvdpB1PhCgewxzWyJZKx",
            "9NevrHbYmYVLhbd8EEutFTA6J9U5dg653SJYT7jsxbJz",
            "king4K4jSToSzfVVDF8LfpFPns1oz85REMeCHbmfceU",
            "6TcViaoZjYu1B5dhcj28TKMFLaagqikZhepBnkLMS1Du",
            "9PKxSJy3fkkHuPTpUuuWse5oMY9ChMvkXseGACoRdWng",
            "6W27mzQHesoWMT1DVcBjFVxWSDB9o6i3B2zLkNJW6YPZ",
            "5kR5bXzLQ8yxC9u9y6P8KgovqRU3kdm9y5wBPh4mmCBY",
            "9rmqGVAPyi2WT3j52RzvrqmtMd16A6NPmtXiGhiwfjPJ",
            "Ag2Ne4hdna4ekAHiPGYPJZ6SVSikZXJUC6hDNzwAkoUK",
            "FB8ZiQmHGpyCpmjNzU41ZbDY8ZC12kVq4McQKTphvxp6",
            "6f4671Q4L36sH8zbLqRAQ3UhtLRBzzYi6iFoJiC25Byv",
            "aJoLFzS4kcH2GyE8GC7ycGJbhK5mpGocPRhUbvFAQyd",
            "DUuV3jXQuphNy8muuKh75xsrRRXrUauiagKKq5VggnR9",
            "6wTVWXQPCmmAJra4wFMoy6kae5s2FguHyhcXyhTGmgTt",
            "3e1bJeWnHxpY9hTaqLZmBJF5qYs7QBiHYCMR6JWapxhw",
            "4qSAjxPRxqPt9Jp26wDo2qvW7uvT33sTJNq4WRJwuX6J",
            "ukk6xYuGxEjZox3JDK8m4AMiYjTN9QX9NDHjQiVEkd3",
            "GHgnnV6riGpjMHwQkQVC8q6zc3tB7y5B1fd7aoNd1RVZ",
            "5pgkJef5YWVktYh437mo6pmYb4oxQjsohGLiEsTqda5t",
            "A5CJYpwgzRqggLcF9pF1nLdbQu7W2ys6YEqEben4NSpu",
            "UZNHFtZ1R6DCuxnmmg2Lh545xKDCSUBpUVNWu9iWZhF",
            "91wUgZtGXWJzQsFKq1T7xrgTaCYWLsLcwPko38V8FjUR",
            "LxVvBob2QZ9pveijKCjnKvgXDhEsiZ9jKxYNWYVKiNG",
        ]
        total_results = list()
        for i, each in enumerate(addresses):
            a = self.get_token_accounts(address=each)
            total_results.extend(a)
            print(i)
            sleep(1)
        for x in total_results:
            print(x.address + "," + str(round(x.current_amount_raw / 1e9, 2)))

    def get_token_accounts(self, address: str) -> List[HoldingData]:
        """Get token accounts for wallet

        Raises:
            Exception: _description_

        Returns:
            list: _description_
        """
        has_next = True
        page = 1
        token_list = list()
        while has_next:
            try:
                token_accounts = self.Helius.get_token_accounts(
                    owner=address,
                    displayOptions={"showZeroBalance": False},
                    page=page,
                    limit=100,  # Adjust limit as needed
                )
            except Exception as e:
                logger.info("Error getting token accounts: {e}".format(e=e))
                sleep(2)
                return list()

            assert token_accounts

            if token_accounts["result"]["total"] == token_accounts["result"]["limit"]:
                has_next = True
                page += 1
            else:
                has_next = False

            expected_keys = sorted(["jsonrpc", "result", "id"])
            response_keys = sorted(token_accounts.keys())

            if expected_keys != response_keys:
                print("here")
                return token_list

            response_result_keys = sorted(token_accounts["result"].keys())

            if (
                "token_accounts" not in response_result_keys
                or "total" not in response_result_keys
                or "limit" not in response_result_keys
            ):
                print("here")
                return token_list

            for each in token_accounts["result"]["token_accounts"]:
                if each["mint"] != self.drink_mint:
                    continue

                token_list.append(HoldingData(mint=each["mint"], address=address, current_amount_raw=each["amount"]))
        return token_list


if __name__ == "__main__":
    S = Drinkdrawdown()
    S.run()
